import com.vaadin.ui.Button;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.Grid;
import com.vaadin.ui.Label;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.data.provider.DataProvider;
import com.vaadin.data.provider.Query;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;

@Route("v1")
public class CustomView extends VerticalLayout {

    private Grid<User> userGrid;
    private Grid<ConditionAction> conditionActionGrid;

    public CustomView() {
        VerticalLayout layout = new VerticalLayout();

        userGrid = new Grid<>();
        userGrid.addColumn(User::getName).setCaption("Name");
        userGrid.addColumn(User::getAge).setCaption("Age");

        // Создание столбца с чекбоксами
        userGrid.addComponentColumn(user -> {
            CheckBox checkbox = new CheckBox();
            checkbox.addValueChangeListener(event -> {
                if (checkbox.getValue()) {
                    showConditions(user);
                } else {
                    hideConditions();
                }
            });
            return checkbox;
        }).setCaption("Show Conditions");

        userGrid.setItems(getUsers());

        Component conditionGrid = getConditionGrid();
        layout.add(userGrid, conditionGrid);
        addComponent(layout);
    }

    private Component getConditionGrid() {
        VerticalLayout conditionComponent = new VerticalLayout();

        conditionActionGrid = new Grid<>();
        conditionActionGrid.addColumn(ConditionAction::getDescription).setCaption("Description");
        conditionActionGrid.addColumn(ConditionAction::getLabel).setCaption("Result");

        Button button = new Button("Выполнить проверку");
        button.addClickListener(event -> showResult());
        conditionComponent.add(conditionActionGrid, button);
        return conditionComponent;
    }

    private void showResult() {
        DataProvider<ConditionAction, ?> dataProvider = conditionActionGrid.getDataProvider();
        Stream<ConditionAction> fetch = dataProvider.fetch(new Query<>());
        fetch.forEach(conditionAction -> {
            if (conditionAction.getDescription().equals("Ковенанты по налогам")) {
                conditionAction.getLabel().setValue("<span style='color: red;'>Проверка пройдена</span>");
            } else if (conditionAction.getDescription().equals("Пакеты платежей")) {
                conditionAction.getLabel().setValue("<span style='color: green;'>Проверка пройдена</span>");
            } else if (conditionAction.getDescription().equals("Еще одна проверка")) {
                conditionAction.getLabel().setValue("<span style='color: blue;'>Проверка пройдена</span>");
            }
        });
    }

    private List<User> getUsers() {
        List<User> users = new ArrayList<>();
        users.add(new User("John", 18));
        users.add(new User("Alice", 33));
        return users;
    }

    private void showConditions(User user) {
        conditionActionGrid.setItems(getConditionActions(user));
        conditionActionGrid.setVisible(true);
    }

    private void hideConditions() {
        conditionActionGrid.setVisible(false);
    }

    private List<ConditionAction> getConditionActions(User user) {
        List<ConditionAction> conditionActions = new ArrayList<>();
        if (user.getAge() == 18) {
            conditionActions.add(new ConditionAction("Ковенанты по налогам", new Label("<span style='color: red;'>111</span>")));
            conditionActions.add(new ConditionAction("Пакеты платежей", new Label("<span style='color: red;'>123</span>")));
            conditionActions.add(new ConditionAction("Еще одна проверка", new Label("<span style='color: red;'>333</span>")));
        } else {
            conditionActions.add(new ConditionAction("Ковенанты по налогам", new Label("<span style='color: red;'>444</span>")));
        }
        return conditionActions;
    }

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    public static class User {
        private String name;
        private int age;
    }

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    public static class ConditionAction {
        private String description;
        private Label label;
    }
}
-------------------------
    public void showResult() {
        // Извлечение данных один раз
        DataProvider<ConditionAction, ?> dataProvider = conditionActionGrid.getDataProvider();
        Stream<ConditionAction> fetch = dataProvider.fetch(new Query<>());

        // Сервисные вызовы выполняются один раз за пределами цикла
        String check639Result = flService.check639(cusId);
        String check100Result = flService.check100(cusId);
        Integer covenant = flService.getCovenant(cusId);
        Integer payment = flService.getPayment(cusId);

        // Обработка каждого элемента потока
        fetch.forEach(conditionAction -> {
            String currentDescription = conditionAction.getDescription();
            switch (currentDescription) {
                case "Согласование услуги":
                    if (!check639Result.equals("Д") && !check100Result.equals("Д")) {
                        updateDescription(conditionAction, "Новое описание");
                    }
                    break;
                case "Ковенанты по налогам":
                    if (covenant <= 5) {
                        updateDescription(conditionAction, "Новое описание для ковенанта");
                    }
                    break;
                case "Платежи за месяц":
                    if (payment > 5000) {
                        updateDescription(conditionAction, "Новое описание для платежей");
                    }
                    break;
            }
            dataProvider.refreshAll();
        });
    }
---------------------------

    public void showResult() {
        DataProvider<ConditionAction, ?> dataProvider = conditionActionGrid.getDataProvider();
        Stream<ConditionAction> fetch = dataProvider.fetch(new Query<>());

        String result638 = flService.check639(cusId);
        String result100 = flService.check100(cusId);
        Integer covenant = flService.getCovenant(cusId);
        Integer payment = flService.getpayment(cusId);

        fetch.forEach(item -> {
            if (item.getDescription().equals("Согласование услуги")) {
                if (!result638.equals("Д") && !result100.equals("Д")) {
                    item.setDescription("Новое описание");
                    errorList.add(item.getDescription());
                }
            }

            if (item.getDescription().equals("Ковенанты по налогам")) {
                if (covenant <= 5) {
                    item.setDescription("Новое описание для ковенанта");
                    errorList.add(item.getDescription());
                }
            }

            if (item.getDescription().equals("Платежи за месяч")) {
                if (covenant > 5000) {
                    item.setDescription("Новое описание для платежей");
                    errorList.add(item.getDescription());
                }
            }
        });
        
